
services:
  app:
    container_name: spring-app
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./.env:/app/.env  # 로컬 디렉토리의 .env 파일을 컨테이너 /app/.env로 매핑
    environment:
      - DOTENV_PATH=/app
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092

# services: 찐 배포할 때는 이거 쓰면 됨
 # app:
  #  container_name: spring-app
   # image: chungisaac/happy:latest
    #environment:
     # - DOTENV_PATH=/app
      #- SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092



      # MongoDB 설정
      #      SPRING_DATA_MONGODB_URI: mongodb+srv://isaac815:32uIydv3OhFMtts2@isaac.2ql1u.mongodb.net/clothesDB?retryWrites=true&w=majority&appName=isaac
      # AWS S3 설정

    ports:
      - "8080:8080" # 로컬 포트 8080을 컨테이너의 8080에 매핑
    depends_on:
      - kafka
    networks:
      - shared-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - shared-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    networks:
      - shared-network
    ports:
      - "9092:9092"  # 내부 통신용 포트
      - "9093:9093"  # 외부 접근용 포트
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_INTERNAL://kafka:9092,PLAINTEXT_EXTERNAL://localhost:9093
      KAFKA_LISTENERS: PLAINTEXT_INTERNAL://0.0.0.0:9092,PLAINTEXT_EXTERNAL://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_INTERNAL:PLAINTEXT,PLAINTEXT_EXTERNAL:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

networks:
  shared-network:
    external: true
